import React, { useEffect } from "react";
import {
  Toolbar,
  IconButton,
  InputBase,
  Stack,
  Button,
  Menu,
  MenuItem,
  useTheme,
  useMediaQuery,
  alpha,
} from "@mui/material";
import MuiAppBar from "@mui/material/AppBar";
import { styled } from "@mui/material/styles";
import SearchIcon from "@mui/icons-material/Search";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import BedtimeOutlinedIcon from "@mui/icons-material/BedtimeOutlined";
import WbSunnyOutlinedIcon from "@mui/icons-material/WbSunnyOutlined";
import NotificationsNoneOutlinedIcon from "@mui/icons-material/NotificationsNoneOutlined";
import SettingsOutlinedIcon from "@mui/icons-material/SettingsOutlined";
import PermIdentityOutlinedIcon from "@mui/icons-material/PermIdentityOutlined";
import logo from "../Assests/Images/HayaLogo.jpg";
import { useTranslation } from "react-i18next";

const drawerWidth = 240;

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginRight: theme.direction === "rtl" ? drawerWidth : 0,
    marginLeft: theme.direction === "ltr" ? drawerWidth : 0,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const Search = styled("div")(({ theme }) => ({
  position: "relative",
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.white, 0.15),
  "&:hover": {
    backgroundColor: alpha(theme.palette.common.white, 0.25),
  },
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: "100%",
  [theme.breakpoints.up("sm")]: {
    marginLeft: theme.direction === "rtl" ? theme.spacing(2) : 0,
    marginRight: theme.direction === "ltr" ? theme.spacing(2) : 0,
    width: "auto",
  },
}));

const SearchIconWrapper = styled("div")(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: theme.direction === "rtl" ? 0 : "auto",
  left: theme.direction === "ltr" ? 0 : "auto",
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  "& .MuiInputBase-input": {
    padding: theme.spacing(1, 1, 1, 0),
    paddingLeft: theme.direction === "rtl" ? 0 : `calc(1em + ${theme.spacing(4)})`,
    paddingRight: theme.direction === "rtl" ? `calc(1em + ${theme.spacing(4)})` : 0,
    textAlign: theme.direction === "rtl" ? "right" : "left",
    transition: theme.transitions.create("width"),
    width: "100%",
    [theme.breakpoints.up("md")]: {
      width: "20ch",
    },
  },
}));

function Header({ open, handleDrawerOpen, setMode }) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [languageMenuAnchorEl, setLanguageMenuAnchorEl] = React.useState(null);
  const [language, setLanguage] = React.useState("en");
  const { i18n, t } = useTranslation();

  useEffect(() => {
    const savedLang = localStorage.getItem("lang") || "en";
    setLanguage(savedLang);
    i18n.changeLanguage(savedLang);
    document.documentElement.lang = savedLang;
    document.documentElement.dir = savedLang === "ar" ? "rtl" : "ltr";
  }, [i18n]);

  const handleLanguageChange = (lang) => {
    setLanguage(lang);
    i18n.changeLanguage(lang);
    localStorage.setItem("lang", lang);
    document.documentElement.lang = lang;
    document.documentElement.dir = lang === "ar" ? "rtl" : "ltr";
    setLanguageMenuAnchorEl(null);
    setAnchorEl(null);
  };

  const handleButtonClick = (e) => setLanguageMenuAnchorEl(e.currentTarget);
  const handleLanguageMenuClose = () => setLanguageMenuAnchorEl(null);
  const handleMenuOpen = (e) => setAnchorEl(e.currentTarget);
  const handleMenuClose = () => setAnchorEl(null);

  const toggleTheme = () => {
    const newMode = theme.palette.mode === "dark" ? "light" : "dark";
    setMode(newMode);
    localStorage.setItem("mode", newMode);
  };

  return (
    <AppBar position="fixed" open={open} sx={{ background: theme.palette.primary.main }}>
      <Toolbar sx={{ direction: i18n.dir() }}>
        <IconButton
          color="inherit"
          aria-label="open drawer"
          onClick={handleDrawerOpen}
          edge={i18n.dir() === "rtl" ? "end" : "start"}
          sx={{
            marginRight: i18n.dir() === "rtl" ? 0 : 5,
            marginLeft: i18n.dir() === "ltr" ? 0 : 5,
            ...(open && { display: "none" }),
          }}
        >
          <img src={logo} alt="logo" style={{ width: "40px", height: "40px" }} />
        </IconButton>

        <Stack
          direction="row"
          justifyContent="space-between"
          alignItems="center"
          sx={{ width: "100%", direction: i18n.dir() }}
        >
          <Search>
            <SearchIconWrapper>
              <SearchIcon />
            </SearchIconWrapper>
            <StyledInputBase
              placeholder={t("search") || "Search‚Ä¶"}
              inputProps={{ "aria-label": "search" }}
            />
          </Search>

          <Stack
            direction="row"
            spacing={1}
            alignItems="center"
            sx={{ direction: i18n.dir() }}
          >
            {isMobile ? (
              <>
                <IconButton color="inherit" onClick={handleMenuOpen}>
                  <MoreVertIcon />
                </IconButton>
                <Menu
                  anchorEl={anchorEl}
                  open={Boolean(anchorEl)}
                  onClose={handleMenuClose}
                  anchorOrigin={{
                    vertical: "bottom",
                    horizontal: i18n.dir() === "rtl" ? "left" : "right",
                  }}
                  transformOrigin={{
                    vertical: "top",
                    horizontal: i18n.dir() === "rtl" ? "left" : "right",
                  }}
                >
                  <MenuItem onClick={() => { toggleTheme(); handleMenuClose(); }}>
                    {theme.palette.mode === "dark" ? <WbSunnyOutlinedIcon /> : <BedtimeOutlinedIcon />}
                    &nbsp; {t("theme")}
                  </MenuItem>
                  <MenuItem onClick={handleMenuClose}>
                    <NotificationsNoneOutlinedIcon />
                    &nbsp; {t("notifications")}
                  </MenuItem>
                  <MenuItem onClick={handleMenuClose}>
                    <SettingsOutlinedIcon />
                    &nbsp; {t("settings")}
                  </MenuItem>
                  <MenuItem onClick={handleMenuClose}>
                    <PermIdentityOutlinedIcon />
                    &nbsp; {t("profile")}
                  </MenuItem>
                  <MenuItem onClick={() => handleLanguageChange(language === "en" ? "ar" : "en")}>
                    üåê {language === "en" ? "ÿπÿ±ÿ®Ÿä" : "English"}
                  </MenuItem>
                </Menu>
              </>
            ) : (
              <>
                <IconButton color="inherit" onClick={toggleTheme}>
                  {theme.palette.mode === "dark" ? <BedtimeOutlinedIcon /> : <WbSunnyOutlinedIcon />}
                </IconButton>
                <IconButton color="inherit">
                  <NotificationsNoneOutlinedIcon />
                </IconButton>
                <IconButton color="inherit">
                  <SettingsOutlinedIcon />
                </IconButton>
                <IconButton color="inherit">
                  <PermIdentityOutlinedIcon />
                </IconButton>
                <Button
                  onClick={handleButtonClick}
                  sx={{
                    padding: "5px",
                    borderRadius: "5px",
                    border: "1px solid white",
                    color: "white",
                    direction: i18n.dir(),
                  }}
                >
                  {language === "en" ? "English" : "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"}
                </Button>
                <Menu
                  anchorEl={languageMenuAnchorEl}
                  open={Boolean(languageMenuAnchorEl)}
                  onClose={handleLanguageMenuClose}
                  anchorOrigin={{
                    vertical: "bottom",
                    horizontal: i18n.dir() === "rtl" ? "left" : "right",
                  }}
                  transformOrigin={{
                    vertical: "top",
                    horizontal: i18n.dir() === "rtl" ? "left" : "right",
                  }}
                >
                  <MenuItem onClick={() => handleLanguageChange("en")}>English</MenuItem>
                  <MenuItem onClick={() => handleLanguageChange("ar")}>ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</MenuItem>
                </Menu>
              </>
            )}
          </Stack>
        </Stack>
      </Toolbar>
    </AppBar>
  );
}

export default React.memo(Header);